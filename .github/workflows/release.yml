name: Release

on:
  push:
    branches:
      - main # Or your default branch

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required to compare versions between commits

      - name: Get version
        id: get_version
        run: echo "version=$(jq -r .version plugin.json)" >> $GITHUB_OUTPUT

      - name: Get previous version
        id: get_previous_version
        run: |
          git show HEAD~1:plugin.json > prev_plugin.json
          echo "version=$(jq -r .version prev_plugin.json)" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare_versions
        if: steps.get_version.outputs.version != steps.get_previous_version.outputs.version
        run: echo "Version changed"

      # Install Node.js
      - name: Install Node.js
        if: steps.compare_versions.conclusion == 'success'
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

        # Install pnpm
      - name: Install pnpm
        if: steps.compare_versions.conclusion == 'success'
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          version: 8
          run_install: false

      # Get pnpm store directory
      - name: Get pnpm store directory
        if: steps.compare_versions.conclusion == 'success'
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # Setup pnpm cache
      - name: Setup pnpm cache
        if: steps.compare_versions.conclusion == 'success'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Install dependencies
        if: steps.compare_versions.conclusion == 'success'
        run: pnpm install

      # Build for production, 这一步会生成一个 package.zip
      - name: Build for production
        if: steps.compare_versions.conclusion == 'success'
        run: pnpm build

      - name: Create Release
        if: steps.compare_versions.conclusion == 'success'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "package.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
